<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="  
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">


	<!-- 加载shiro配置文件 -->
	<context:property-placeholder
		location="classpath:com/stone/base/config/shiro.properties"
		ignore-unresolvable="true" />

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="${shiro.loginUrl}" />
		<property name="successUrl" value="${shiro.successUrl}" />
		<property name="unauthorizedUrl" value="${shiro.unauthorizedUrl}" />
		<property name="filters">
			<map>
				<entry key="roleOrFilter" value-ref="roleOrFilter" />
			</map>
		</property>
		<property name="filterChainDefinitionMap" ref="chainDefinitionSectionMetaSource" />
	</bean>

	<bean id="roleOrFilter" class="com.stone.base.security.MyRolesAuthorizationFilter" />

	<bean id="chainDefinitionSectionMetaSource"
		class="com.stone.base.security.ChainDefinitionSectionMetaSource">
		<property name="ibatisBaseDao" ref="ibatisBaseDao" />
		<property name="redisTemplate" ref="redisTemplate" />
		<property name="filterChainDefinitions">
			<value>
				/login.do = anon
				/logout.do = logout
				<!-- /shop/* = authc,roles["1"] -->
			</value>
		</property>
	</bean>

	<bean id="shiroDataBaseRealm" class="com.stone.base.security.ShiroDataBaseRealm">
		<!-- MD5加密 -->
		<property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5" />
			</bean>
		</property>
		<property name="ibatisBaseDao" ref="ibatisBaseDao" />
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="shiroDataBaseRealm" />
		<property name="sessionManager" ref="sessionManager" />
<!-- 		<property name="cacheManager" ref="cacheManager" /> -->
	</bean>

	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 设置全局会话超时时间，默认30分钟(1800000) -->
		<property name="globalSessionTimeout" value="1800000" />
		<!-- 是否在会话过期后会调用SessionDAO的delete方法删除会话 默认true -->
<!-- 		<property name="deleteInvalidSessions" value="true" /> -->
		<!-- 相隔多久检查一次session的有效性 -->
		<property name="sessionValidationInterval" value="1800000" />
		<property name="sessionDAO" ref="redisSessionDAO" />
		<!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
		<property name="sessionIdCookie" ref="shareSession" />
		<!-- 定时检查失效的session -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
	</bean>
	
	
    <bean id="shareSession" class="org.apache.shiro.web.servlet.SimpleCookie">  
        <!-- cookie的name,对应的默认是 JSESSIONID -->  
        <constructor-arg name="name" value="RJSESSIONID" />  
        <!-- jsessionId的path为 / 用于多个系统共享jsessionId -->  
        <property name="path" value="/" />  
        <property name="httpOnly" value="true"/>  
    </bean>  

	<bean id="cacheManager" class="com.stone.base.security.RedisCacheManager">
		<property name="redisCache" ref="redisCache" />
	</bean>

	<bean id="redisCache" class="com.stone.base.security.RedisCache">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>

	<bean id="redisSessionDAO" class="com.stone.base.security.RedisSessionDAO">
		<property name="redisTemplate" ref="redisTemplate" />
	</bean>



	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
	</bean>

	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>