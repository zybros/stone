<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.stone.product.mapper.TProductSkuMapper">
<!-- 	<cache type="org.mybatis.caches.ehcache.EhcacheCache" /> -->
	<resultMap id="BaseResultMap" type="com.stone.product.model.TProductSku">
		<id column="ID" property="id" jdbcType="INTEGER" />
		<result column="CATEGORY_ID" property="categoryId" jdbcType="INTEGER" />
		<result column="PRODUCT_ID" property="productId" jdbcType="INTEGER" />
		<result column="SKU_NO" property="skuNo" jdbcType="VARCHAR" />
		<result column="PRICE" property="price" jdbcType="REAL" />
		<result column="DISCOUNT" property="discount" jdbcType="REAL" />
		<result column="DISCOUNT_PRICE" property="discountPrice"
			jdbcType="REAL" />
		<result column="STOCK" property="stock" jdbcType="INTEGER" />
		<result column="UPPER_LIMIT" property="upperLimit" jdbcType="INTEGER" />
		<result column="IMG_INDEX" property="imgIndex" jdbcType="INTEGER" />
		<result column="SKU_TYPE" property="skuType" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Base_Column_List">
		ID, CATEGORY_ID, PRODUCT_ID, SKU_NO, PRICE, DISCOUNT,
		DISCOUNT_PRICE,
		STOCK, UPPER_LIMIT,
		IMG_INDEX, SKU_TYPE
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from t_product_sku
		where ID = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer"
		flushCache="true">
		delete from t_product_sku
		where ID = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.stone.product.model.TProductSku"
		useGeneratedKeys="true" keyProperty="id">
		insert into t_product_sku (CATEGORY_ID, PRODUCT_ID, SKU_NO,
		PRICE,
		DISCOUNT, DISCOUNT_PRICE,
		STOCK, UPPER_LIMIT, IMG_INDEX,
		SKU_TYPE)
		values (#{categoryId,jdbcType=INTEGER}, #{productId,jdbcType=INTEGER},
		#{skuNo,jdbcType=VARCHAR},
		#{price,jdbcType=REAL},
		#{discount,jdbcType=REAL}, #{discountPrice,jdbcType=REAL},
		#{stock,jdbcType=INTEGER}, #{upperLimit,jdbcType=INTEGER},
		#{imgIndex,jdbcType=INTEGER},
		#{skuType,jdbcType=INTEGER})

		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID() as ID;
		</selectKey>
	</insert>



	<insert id="insertList" parameterType="java.util.List">
		insert into t_product_sku (ID,CATEGORY_ID, PRODUCT_ID, SKU_NO,
		PRICE,
		DISCOUNT, DISCOUNT_PRICE,
		STOCK, UPPER_LIMIT, IMG_INDEX,
		SKU_TYPE)
		values
		<foreach collection="list" item="item" index="index"
			separator=",">
			(#{item.id},#{item.categoryId}, #{item.productId},
			#{item.skuNo},
			#{item.price}, #{item.discount}, #{item.discountPrice},
			#{item.stock}, #{item.upperLimit}, #{item.imgIndex},
			#{item.skuType})
		</foreach>
	</insert>


	<insert id="insertSelective" parameterType="com.stone.product.model.TProductSku"
		useGeneratedKeys="true" keyProperty="id" flushCache="true">
		insert into t_product_sku
		<trim prefix="(" suffix=")" suffixOverrides=",">
			CATEGORY_ID,
			PRODUCT_ID,
			SKU_NO,
			PRICE,
			DISCOUNT,
			DISCOUNT_PRICE,
			STOCK,
			UPPER_LIMIT,
			IMG_INDEX,
			SKU_TYPE,
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			#{categoryId,jdbcType=INTEGER},
			#{productId,jdbcType=INTEGER},
			#{skuNo,jdbcType=VARCHAR},
			#{price,jdbcType=REAL},
			#{discount,jdbcType=REAL},
			#{discountPrice,jdbcType=REAL},
			#{stock,jdbcType=INTEGER},
			#{upperLimit,jdbcType=INTEGER},
			#{imgIndex,jdbcType=INTEGER},
			#{skuType,jdbcType=INTEGER},
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.stone.product.model.TProductSku"
		flushCache="true">
		update t_product_sku
		<set>
			<if test="categoryId != null">
				CATEGORY_ID = #{categoryId,jdbcType=INTEGER},
			</if>
			<if test="productId != null">
				PRODUCT_ID = #{productId,jdbcType=INTEGER},
			</if>
			<if test="skuNo != null">
				SKU_NO = #{skuNo,jdbcType=VARCHAR},
			</if>
			<if test="price != null">
				PRICE = #{price,jdbcType=REAL},
			</if>
			<if test="discount != null">
				DISCOUNT = #{discount,jdbcType=REAL},
			</if>
			<if test="discountPrice != null">
				DISCOUNT_PRICE = #{discountPrice,jdbcType=REAL},
			</if>
			<if test="stock != null">
				STOCK = #{stock,jdbcType=INTEGER},
			</if>
			<if test="upperLimit != null">
				UPPER_LIMIT = #{upperLimit,jdbcType=INTEGER},
			</if>
			<if test="imgIndex != null">
				IMG_INDEX = #{imgIndex,jdbcType=INTEGER},
			</if>
			<if test="skuType != null">
				SKU_TYPE = #{skuType,jdbcType=INTEGER},
			</if>
		</set>
		where ID = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.stone.product.model.TProductSku"
		flushCache="true">
		update t_product_sku
		set CATEGORY_ID =
		#{categoryId,jdbcType=INTEGER},
		PRODUCT_ID =
		#{productId,jdbcType=INTEGER},
		SKU_NO = #{skuNo,jdbcType=VARCHAR},
		PRICE = #{price,jdbcType=REAL},
		DISCOUNT = #{discount,jdbcType=REAL},
		DISCOUNT_PRICE = #{discountPrice,jdbcType=REAL},
		STOCK =
		#{stock,jdbcType=INTEGER},
		UPPER_LIMIT =
		#{upperLimit,jdbcType=INTEGER},
		IMG_INDEX =
		#{imgIndex,jdbcType=INTEGER},
		SKU_TYPE = #{skuType,jdbcType=INTEGER}
		where ID = #{id,jdbcType=INTEGER}
	</update>

	<resultMap id="templateMap" type="com.stone.category.model.TCategoryTemplate">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="category_id" property="categoryId" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="CHAR" />
		<result column="status" property="status" jdbcType="INTEGER" />
		<result column="order" property="order" jdbcType="INTEGER" />
		<result column="value_order" property="valueOrder" jdbcType="INTEGER" />
		<result column="format" property="format" jdbcType="INTEGER" />
		<result column="options" property="options" jdbcType="VARCHAR" />
		<result column="type" property="type" jdbcType="INTEGER" />
	</resultMap>
	
	<resultMap id="templateMap2" type="com.stone.category.model.TCategoryTemplate">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="category_id" property="categoryId" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="CHAR" />
		<result column="status" property="status" jdbcType="INTEGER" />
		<result column="order" property="order" jdbcType="INTEGER" />
		<result column="value_order" property="valueOrder" jdbcType="INTEGER" />
		<result column="format" property="format" jdbcType="INTEGER" />
		<result column="options" property="options" jdbcType="VARCHAR" />
		<result column="type" property="type" jdbcType="INTEGER" />
	</resultMap>


	<resultMap id="skuMap" type="com.stone.product.model.TProductSku">
		<id column="ID" property="id" jdbcType="INTEGER" />
		<result column="CATEGORY_ID" property="categoryId" jdbcType="INTEGER" />
		<result column="PRODUCT_ID" property="productId" jdbcType="INTEGER" />
		<result column="SKU_NO" property="skuNo" jdbcType="VARCHAR" />
		<result column="PRICE" property="price" jdbcType="REAL" />
		<result column="DISCOUNT" property="discount" jdbcType="REAL" />
		<result column="DISCOUNT_PRICE" property="discountPrice"
			jdbcType="REAL" />
		<result column="STOCK" property="stock" jdbcType="INTEGER" />
		<result column="UPPER_LIMIT" property="upperLimit" jdbcType="INTEGER" />
		<result column="IMG_INDEX" property="imgIndex" jdbcType="INTEGER" />
		<result column="SKU_TYPE" property="skuType" jdbcType="INTEGER" />
	</resultMap>

	<resultMap id="valMap" type="com.stone.product.model.TSkuValue">
		<id column="ID" property="id" jdbcType="INTEGER" />
		<result column="PRODUCT_ID" property="productId" jdbcType="INTEGER" />
		<result column="SKU_ID" property="skuId" jdbcType="INTEGER" />
		<result column="TEMPLATE_ID" property="templateId" jdbcType="INTEGER" />
		<result column="VALUE" property="value" jdbcType="VARCHAR" />
		<result column="value_order" property="valueOrder" jdbcType="INTEGER" />
	</resultMap>

	<select id="callTemplateAndSkus" parameterType="com.stone.product.model.Product"
		statementType="CALLABLE" resultMap="templateMap,skuMap,valMap">
		{call call_template_skus(#{categoryId}, #{productId})}
	</select>
	
	<delete id="deleteByProductId" parameterType="java.lang.Integer">
		delete from
		t_product_sku where PRODUCT_ID = #{productId}
	</delete>
	
	
	
	
	
<!--   下单确认 的商品信息       此处可以考虑用存储过程实现   -->	
<select id="selectSkus4confirm" parameterType="int" resultMap="skuMap4confirm">
	SELECT 
		s.shop_id, s.name as shop_name, p.id as product_id,p.title, p.imgs, ps.id as sku_id, ps.price, ps.img_index, sv.value, ct.name as template_name
	FROM 
		t_shop s, t_product p, t_product_sku ps, t_sku_value sv, t_category_template ct 
	WHERE 
		s.shop_id=p.shop_id and p.id = ps.product_id AND ps.id = sv.sku_id AND sv.template_id = ct.id AND ps.id in
		
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
                   #{id}
        </foreach>
</select>

<select id="selectSku4cart" parameterType="int" resultMap="skuMap4confirm">
	SELECT 
		s.shop_id, s.name as shop_name, p.id as product_id,p.title, p.imgs, ps.id as sku_id, ps.price, ps.img_index, sv.value, ct.name as template_name
	FROM 
		t_shop s, t_product p, t_product_sku ps, t_sku_value sv, t_category_template ct 
	WHERE 
		s.shop_id=p.shop_id and p.id = ps.product_id AND ps.id = sv.sku_id AND sv.template_id = ct.id AND ps.id = #{id}
</select>
<!-- sku 为逻辑核心的 MAP 映射  start  -->
<resultMap id="skuMap4confirm" type="com.stone.product.model.TProductSku">
	<id column="sku_id" property="id" jdbcType="INTEGER" />
	<result column="PRICE" property="price" jdbcType="REAL" />
	<result column="IMG_INDEX" property="imgIndex" jdbcType="INTEGER" />
	<association property="product" resultMap="proMap2"/>
	<collection property="valList" resultMap="valueMap2"/>
</resultMap>

<resultMap id="proMap2" type="com.stone.product.model.Product" >
    <id column="product_id" property="id" jdbcType="INTEGER" />
    <result column="SHOP_ID" property="shopId" jdbcType="INTEGER" />
    <result column="TITLE" property="title" jdbcType="VARCHAR" />
    <result column="IMGS" property="imgs" jdbcType="VARCHAR" />
    <association property="shop" resultMap="shop2"/>
</resultMap>

<resultMap id="valueMap2" type="com.stone.product.model.TSkuValue">
	<result property="value" column="value"/>
	<result property="templateName" column="template_name"/>
</resultMap>

<resultMap id="shop2" type="com.stone.shop.model.TShop">
	<id column="shop_id" property="shopId" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="CHAR" />
</resultMap>
<!-- sku 为逻辑核心的 MAP 映射  end  -->



<select id="selectSkusGroupByShop" parameterType="int" resultMap="shop3">
	SELECT 
		s.shop_id, s.name as shop_name, p.id as product_id,p.title, p.imgs, ps.id as sku_id, ps.sku_no, ps.price, ps.img_index, sv.value, ct.name as template_name
	FROM 
		t_shop s, t_product p, t_product_sku ps, t_sku_value sv, t_category_template ct 
	WHERE 
		s.shop_id=p.shop_id and p.id = ps.product_id AND ps.id = sv.sku_id AND sv.template_id = ct.id AND ps.id in
		
		<foreach item="id" index="index" collection="list" open="(" separator="," close=")">
                   #{id}
        </foreach>
</select>


<!-- shop 为逻辑核心的 MAP 映射  start  -->
<resultMap id="shop3" type="com.stone.shop.model.TShop">
	<id column="shop_id" property="shopId" jdbcType="INTEGER" />
    <result column="shop_name" property="name" jdbcType="CHAR" />
    <collection property="productList" resultMap="proMap3"/>
</resultMap>

<resultMap id="proMap3" type="com.stone.product.model.Product" >
    <id column="product_id" property="id" jdbcType="INTEGER" />
    <result column="SHOP_ID" property="shopId" jdbcType="INTEGER" />
    <result column="TITLE" property="title" jdbcType="VARCHAR" />
    <result column="IMGS" property="imgs" jdbcType="VARCHAR" />
    <collection property="skuList" resultMap="skuMap3"/>
</resultMap>

<resultMap id="skuMap3" type="com.stone.product.model.TProductSku">
	<id column="sku_id" property="id" jdbcType="INTEGER" />
	<result column="SKU_NO" property="skuNo" jdbcType="VARCHAR" />
	<result column="PRICE" property="price" jdbcType="REAL" />
	<result column="IMG_INDEX" property="imgIndex" jdbcType="INTEGER" />
	<result column="CATEGORY_ID" property="categoryId" jdbcType="INTEGER" />
	<result column="PRODUCT_ID" property="productId" jdbcType="INTEGER" />
	<result column="STOCK" property="stock" jdbcType="INTEGER" />
	<collection property="valList" resultMap="valueMap3"/>
</resultMap>

<resultMap id="valueMap3" type="com.stone.product.model.TSkuValue">
	<result property="value" column="value"/>
	<result property="templateId" column="template_id"/>
	<result property="templateName" column="template_name"/>
</resultMap>
<!-- shop 为逻辑核心的 MAP 映射  end  -->


<select id="selectSkusByProductId" parameterType="int" resultMap="skuMap3">
SELECT sku.id as SKU_ID, sku.PRODUCT_ID, sku.SKU_NO,sku.PRICE,sku.STOCK,sku.CATEGORY_ID,sku.IMG_INDEX,
sku_val.`VALUE`,sku_val.TEMPLATE_ID,
tpl.`NAME` as TEMPLATE_NAME 
from t_product_sku  sku LEFT JOIN t_sku_value sku_val
on sku.id  = sku_val.SKU_ID LEFT JOIN t_category_template tpl
ON sku_val.TEMPLATE_ID = tpl.id
where sku.product_id = #{productId}
</select>

<select id="selectSkuValsGroupBySkuId" parameterType="int" resultType="java.util.Map">
	select SKU_ID as skuId,GROUP_CONCAT(template_id,":",value ORDER BY TEMPLATE_ID) as vals from t_sku_value val
	where val.PRODUCT_ID=#{productId}
	group BY SKU_ID
</select>


<select id="callTemplateAndSku" statementType="CALLABLE" resultMap="templateMap,templateMap2,skuMap3">
	{call call_template_sku(#{categoryId}, #{skuId})}
</select>

</mapper>