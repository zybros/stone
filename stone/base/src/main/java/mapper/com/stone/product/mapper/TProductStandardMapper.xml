<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.stone.product.mapper.TProductStandardMapper" >

 <resultMap id="templateMap" type="com.stone.category.model.TCategoryTemplate" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="category_id" property="categoryId" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="CHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="order" property="order" jdbcType="INTEGER" />
    <result column="value_order" property="valueOrder" jdbcType="INTEGER" />
    <result column="format" property="format" jdbcType="INTEGER" />
    <result column="options" property="options" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
  </resultMap>
	

  <resultMap id="standardMap" type="com.stone.product.model.TProductStandard" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="category_id" property="categoryId" jdbcType="INTEGER" />
    <result column="product_id" property="productId" jdbcType="INTEGER" />
    <result column="values" property="values" jdbcType="VARCHAR" />
    <result column="price" property="price" jdbcType="REAL" />
    <result column="stock" property="stock" jdbcType="INTEGER" />
  </resultMap>
  
  
  <sql id="Base_Column_List" >
    id, category_id, product_id, `values`, price, stock
  </sql>
  <select id="selectByPrimaryKey" resultMap="standardMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_product_sku
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_product_sku
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  <insert id="insert" parameterType="com.stone.product.model.TProductStandard" useGeneratedKeys="true" keyProperty="id" >
    insert into t_product_sku (category_id, product_id, `values`, 
      price, stock)
    values (#{categoryId,jdbcType=INTEGER}, #{productId,jdbcType=INTEGER}, #{values,jdbcType=VARCHAR}, 
      #{price,jdbcType=REAL}, #{stock,jdbcType=INTEGER})
  </insert>
  
  <insert id="insertList" parameterType="java.util.List" flushCache="true" >
     insert into t_product_sku (category_id, product_id, `values`, 
      price, stock)
    values 
    <foreach collection="list" item="item" index="index" separator=","> 
    	(#{item.categoryId}, #{item.productId}, #{item.values}, #{item.price}, #{item.stock})
    </foreach> 
  </insert>
  
   <insert id="insertListWithId" parameterType="java.util.List" flushCache="true" >
     insert into t_product_sku (id,category_id, product_id, `values`, 
      price, stock)
    values 
    <foreach collection="list" item="item" index="index" separator=","> 
    	(#{item.id},#{item.categoryId}, #{item.productId}, #{item.values}, #{item.price}, #{item.stock})
    </foreach> 
  </insert>
  
  <insert id="insertSelective" parameterType="com.stone.product.model.TProductStandard" useGeneratedKeys="true" keyProperty="id" >
    insert into t_product_sku
    <trim prefix="(" suffix=")" suffixOverrides="," >
      category_id,
      product_id,
      `values`,
      price,
      stock,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{categoryId,jdbcType=INTEGER},
      #{productId,jdbcType=INTEGER},
      #{values,jdbcType=VARCHAR},
      #{price,jdbcType=REAL},
      #{stock,jdbcType=INTEGER},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.stone.product.model.TProductStandard" >
    update t_product_sku
    <set >
      <if test="categoryId != null" >
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="productId != null" >
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="values != null" >
        `values` = #{values,jdbcType=VARCHAR},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=REAL},
      </if>
      <if test="stock != null" >
        stock = #{stock,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.stone.product.model.TProductStandard" >
    update t_product_sku
    set category_id = #{categoryId,jdbcType=INTEGER},
      product_id = #{productId,jdbcType=INTEGER},
      `values` = #{values,jdbcType=VARCHAR},
      price = #{price,jdbcType=REAL},
      stock = #{stock,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <update id="updateList" parameterType="java.util.List" flushCache="true" >
    	<foreach collection="list" item="item" index="index" open="" close="" separator=";">
                update t_product_sku
                <set>
                   price = #{item.price},
      			   stock = #{item.stock}
                </set>
                where id = #{item.id}
         </foreach>
  </update>
  
  
  <update id="updateStandardValues" parameterType="com.stone.category.model.TCategoryTemplate" statementType="CALLABLE">
   	<![CDATA[
   		 {call updateStandardValues(#{valueOrder}, #{categoryId})}  
   		 ]]>
  </update>
  
  
  <delete id="deleteByProductId" parameterType="java.lang.Integer">
		delete from t_product_sku where product_id = #{productId}
  </delete>
  
  
   <select id="callTemplateAndStandard" parameterType="com.stone.product.model.Product" statementType="CALLABLE" resultMap="templateMap,standardMap" >  
      {call callTemplateAndStandard(#{cid}, #{id})}
    </select>
  
</mapper>