<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="com.stone.security.mapper.TResourceMapper" >
  <cache type="org.mybatis.caches.ehcache.EhcacheCache" />
  <resultMap id="BaseResultMap" type="com.stone.security.model.TResource" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />
    <result column="name" property="roleName" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, url, role_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_resource
    where id = #{id,jdbcType=INTEGER}
  </select>
  
   <select id="getAll" resultMap="BaseResultMap">
   		select re.id,re.url,ro.name from t_resource re LEFT JOIN t_role ro on re.role_id=ro.id ;
  </select>
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" flushCache="true" >
    delete from t_resource
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.stone.security.model.TResource" flushCache="true" >
    insert into t_resource (id, url, role_id
      )
    values (#{id,jdbcType=INTEGER}, #{url,jdbcType=VARCHAR}, #{roleId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.stone.security.model.TResource" flushCache="true" >
    insert into t_resource
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      url,
      role_id,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{id,jdbcType=INTEGER},
      #{url,jdbcType=VARCHAR},
      #{roleId,jdbcType=INTEGER},
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.stone.security.model.TResource" flushCache="true" >
    update t_resource
    <set >
      <if test="url != null" >
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="roleId != null" >
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.stone.security.model.TResource" flushCache="true" >
    update t_resource
    set url = #{url,jdbcType=VARCHAR},
      role_id = #{roleId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>